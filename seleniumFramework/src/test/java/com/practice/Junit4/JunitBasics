@Test(expected=AirthmeticException.class) 
This annotation expects method to throw Airthmetic exception & it passes when this exception occurs. 
Test fails when the airthmetic exception doesn't occur. 
<--------------------------------->
@Ignore
@Test
public void IgnoredTest(){sopln("hello");}
This will not be executed

<--------------------------------->
// timeout is given in milliseconds
	@Test(timeout = 1000)
<--------------------------------->
Creating Suites :
Use
@RunWith(Suite.class)
@Suite.SuiteClasses({FirstTest.class,SecondTest.class})
For example: SuitTest.java
<--------------------------------->
Parameterised Tests:

add @RunWith(Parameterized.class) 
Create one parameterised constructor 
create a static method  with @Parameters annotation having return type Collection<Object[][]>

@Test Method will be executed depending upon the size of object[][]

Example FirstTest.java
SecondTest.java

<--------------------------------->
Sequence of Junit method's call
@BeforeClass-
@Before 
@test 
@after
@Before 
@test
@after 
@AfterClass 
<--------------------------------->
this can be used to operate on test results of execution : 
Result result=JunitCore.run(classNames);
Example main(String[]args) {} of ErrorCollectorExample.java
<--------------------------------->
ASSERTIONS : 
AssertionExampleTest in FirstTest.java
<----------------------------------->
ErrorCollectorExample.java
Saving errors in ErrorCollector & re-suing it later for generating custom reports. 


